# Codebraid

The source of this document is [codebraid.cbmd](./codebraid.cbmd). I
combine `entr` and `make` to run `codebraid`any time the source file
is changed. The [`Makefile`](../Makefile) is inspired by an example in
[The Tao of
Tmux](https://leanpub.com/the-tao-of-tmux/read#file-watching).

You should read about [Pandoc's
Markdown](https://pandoc.org/MANUAL.html#pandocs-markdown) before
using Codebraid.

Pay close attention to these extensions:

- `fenced_code_blocks`
- `backtick_code_blocks`
- `fenced_code_attributes`

## Mermaid

Since I now use Codebraid I get to use Pandoc filters too! Like
[`mermaid-filter`](https://github.com/raghur/mermaid-filter).

```{.mermaid loc=img format=svg}
graph LR
    A[Pandoc Markdown] --> B[Codebraid]
    B --> C[Pandoc]
    C --> D[Pandoc filters]
    D --> E[Markdown]
```

I could probably pipe Mermaid syntax through a Python subprocess to
`mermaid-cli`. Speaking of wonderful things... Someone has made a web
service that creates diagrams for all kinds of textual diagram
languages - [kroki.io](https://kroki.io/). Diagrams!

<!-- - https://gist.github.com/jerieljan/4c82515ff5f2b2e4dd5122d354a82b7e -->
<!-- - https://monodraw.helftone.com/ -->
<!-- - https://app.diagrams.net/ aka Drawio has AWS 3D -->

## Diagrams

Here I create a diagram with [diagrams](https://github.com/mingrammer/diagrams).

```{.python .cb.run executable=../venv/bin/python}
from diagrams import Diagram
from diagrams.aws.compute import EC2
from diagrams.aws.database import RDS
from diagrams.aws.network import ELB

with Diagram("Grouped Workers", show=False, direction="TB", outformat="png"):
    ELB("lb") >> [EC2("worker1"),
                  EC2("worker2"),
                  EC2("worker3"),
                  EC2("worker4"),
                  EC2("worker5")] >> RDS("events")

print("![Grouped Workers](grouped_workers.png)")
```

# Help texts

Here is `pweave --help`:

```{.bash .cb.run show=stdout:verbatim}
pweave --help
```

Here is `codebraid --help`:

```{.bash .cb.run show=stdout:verbatim}
codebraid --help
```

I am listening to music with `catt` ([âž¸ catt](https://github.com/skorokithakis/catt))...

```{.bash .cb.run show=stdout:verbatim}
catt status
```

What do you get when sending panda to httpbin.org? You get `curl -s "https://httpbin.org/anything?value=panda" | jq -j .args.value`{.bash .cb.run}.

This is the result of a `curl` command querying a quote API:

```{.bash .cb.run show=stdout:verbatim}
curl https://type.fit/api/quotes -s | jq -j '.[0].text'
```

How about some Terraform documentation?

```{.bash .cb.run show=stdout:raw}
terraform-config-inspect ../../terraform-aws-s3-object | sed ""
```
